import os
import time
import json
import threading
from datetime import datetime, timedelta
from dotenv import load_dotenv
import telebot
from telebot import types

from telebot.types import BotCommand



# =================== –ù–ê–°–¢–†–û–ô–ö–ò ===================
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
MOM_ID = os.getenv("MOM_ID")  # –∞–π–¥–∏ –º–∞–º—ã –±–µ—Ä—ë–º –∏–∑ .env
DAR_ID = os.getenv("MOM_ID")  # –∞–π–¥–∏ –º–∞–º—ã –±–µ—Ä—ë–º –∏–∑ .env
AL_ID = os.getenv("MOM_ID")  # –∞–π–¥–∏ –º–∞–º—ã –±–µ—Ä—ë–º –∏–∑ .env

bot = telebot.TeleBot(TOKEN)

# –î–µ—Ç–∏
user_to_child = {
    DAR_ID: "–î–∞—Ä–∏–Ω–∞",
    AL_ID: "–ê–ª–∏–º–∞–Ω",
}

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–æ–≤
lesson_duration = {
    "default": 45,
    "–ê–ª–∏–º–∞–Ω": 75
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
with open("schedule.json", "r", encoding="utf-8") as f:
    schedule = json.load(f)


# =================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===================
def get_schedule_text(child_name, day):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å"""
    if day not in schedule[child_name] or not schedule[child_name][day]:
        return f"–í —ç—Ç–æ—Ç –¥–µ–Ω—å —É {child_name} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üòé"

    classes = [f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {child_name} –Ω–∞ –¥–µ–Ω—å {day}:"]
    for time, subject in schedule[child_name][day].items():
        classes.append(f"{subject} –≤ {time}")
    return "\n".join(classes)


def get_latest_end(day):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –≤—Å–µ—Ö –¥–µ—Ç–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å"""
    latest_end_time = None
    children_today = []

    for child_name, days in schedule.items():
        if day in days and days[day]:
            children_today.append(child_name)
            for start_time_str in days[day].keys():
                start_time = datetime.strptime(start_time_str, "%H:%M")
                duration = lesson_duration.get(child_name, lesson_duration["default"])
                end_time = start_time + timedelta(minutes=duration)
                if not latest_end_time or end_time > latest_end_time:
                    latest_end_time = end_time

    return latest_end_time, children_today


def days_keyboard(prefix, child_name=None):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    markup = types.InlineKeyboardMarkup(row_width=3)
    for i in range(7):
        callback = f"{prefix}_{i}" if not child_name else f"{prefix}_{child_name}_{i}"
        markup.add(types.InlineKeyboardButton(text=str(i), callback_data=callback))
    return markup


# =================== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===================
def send_reminder(child_name, subject, lesson_time):
    """–®–ª—ë–º —Ä–µ–±—ë–Ω–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç"""
    for user_id, name in user_to_child.items():
        if name == child_name:
            bot.send_message(user_id, f"–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç —É —Ç–µ–±—è {subject} –≤ {lesson_time}! üöÄ")


def schedule_reminders():
    """–°—Ç–∞–≤–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –î–∞—Ä–∏–Ω–µ –∏ –ê–ª–∏–º–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    now = datetime.now()
    weekday = str(now.weekday())

    for child_name in ["–î–∞—Ä–∏–Ω–∞", "–ê–ª–∏–º–∞–Ω"]:
        if child_name in schedule and weekday in schedule[child_name]:
            for lesson_time, subject in schedule[child_name][weekday].items():
                reminder_time = datetime.strptime(lesson_time, "%H:%M") - timedelta(minutes=5)
                reminder_time = reminder_time.replace(year=now.year, month=now.month, day=now.day)

                delay = (reminder_time - now).total_seconds()
                if delay > 0:
                    threading.Timer(delay, send_reminder, args=[child_name, subject, lesson_time]).start()


def send_mom_reminder(latest_time, children_str):
    """–®–ª—ë–º –º–∞–º–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 20 –º–∏–Ω—É—Ç"""
    if MOM_ID:
        bot.send_message(MOM_ID, f"–ß–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç ({latest_time.strftime('%H:%M')}) "
                                 f"—É –¥–µ—Ç–µ–π ({children_str}) –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è —É—Ä–æ–∫–∏. –ú–æ–∂–Ω–æ –µ—Ö–∞—Ç—å –∏—Ö –∑–∞–±–∏—Ä–∞—Ç—å üöó")


def schedule_mom_reminder():
    """–°—Ç–∞–≤–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–∞–º–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    now = datetime.now()
    weekday = str(now.weekday())
    latest_end_time, children_today = get_latest_end(weekday)

    if not latest_end_time or not children_today:
        return

    reminder_time = latest_end_time - timedelta(minutes=20)
    reminder_time = reminder_time.replace(year=now.year, month=now.month, day=now.day)

    delay = (reminder_time - now).total_seconds()
    if delay > 0:
        children_str = ", ".join(children_today)
        threading.Timer(delay, send_mom_reminder, args=[latest_end_time, children_str]).start()


def daily_scheduler():
    """–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    while True:
        now = datetime.now()
        tomorrow = (now + timedelta(days=1)).replace(hour=0, minute=0, second=5, microsecond=0)
        sleep_time = (tomorrow - now).total_seconds()
        time.sleep(sleep_time)

        # –ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        schedule_reminders()
        schedule_mom_reminder()


# =================== –ö–û–ú–ê–ù–î–´ ===================
@bot.message_handler(commands=['start'])
# def start(message):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     start_btn = types.KeyboardButton("–°—Ç–∞—Ä—Ç")
#     markup.add(start_btn)
#     bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! "
#                                       f"–ù–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç', —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.", reply_markup=markup)
#

# @bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ä—Ç")
def show_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! ", reply_markup=markup)

    # –∫–Ω–æ–ø–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    buttons = [
        types.KeyboardButton("/today - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
        types.KeyboardButton("/children - –í—ã–±—Ä–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞"),
        types.KeyboardButton("/weekdays - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏"),
        types.KeyboardButton("/zabrat - –°–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è"),
        types.KeyboardButton("/zabratpotom - –°–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å"),
    ]

    # –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É
    start_btn = types.KeyboardButton("/start - –°—Ç–∞—Ä—Ç")

    markup.add(*buttons)
    markup.add(start_btn)

    bot.send_message(
        message.chat.id,
        "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:\n"
        "üìÖ /today ‚Äì —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üë∂ /children ‚Äì –≤—ã–±—Ä–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞\n"
        "üóì /weekdays ‚Äì —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏\n"
        "üöó /zabrat ‚Äì –≤—Ä–µ–º—è –∑–∞–±–∏—Ä–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è\n"
        "‚è≥ /zabratpotom ‚Äì –∑–∞–±–∏—Ä–∞–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å",
        reply_markup=markup
    )


@bot.message_handler(commands=['today'])
def today(message):
    user_id = str(message.from_user.id)
    child_name = user_to_child.get(user_id)
    if not child_name:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏, –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üôÉ")
        return
    weekday = str(datetime.now().weekday())
    text = get_schedule_text(child_name, weekday)
    bot.send_message(message.chat.id, f"–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è:\n{text}" if "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in text else text)


@bot.message_handler(commands=['children'])
def children(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in schedule.keys()]
    markup.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in schedule.keys())
def show_schedule(message):
    child_name = message.text
    weekday = str(datetime.now().weekday())
    text = get_schedule_text(child_name, weekday)
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['weekdays'])
def weekdays(message):
    markup = types.InlineKeyboardMarkup()
    for name in schedule.keys():
        markup.add(types.InlineKeyboardButton(text=name, callback_data=f"child_{name}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("child_"))
def choose_day(call):
    child_name = call.data.split("_")[1]
    markup = days_keyboard("day", child_name)
    bot.send_message(call.message.chat.id,
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è {child_name} (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ):",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("day_"))
def show_schedule_day(call):
    _, child_name, day = call.data.split("_")
    text = get_schedule_text(child_name, day)
    bot.send_message(call.message.chat.id, text)


@bot.message_handler(commands=['zabrat'])
def zabrat_today(message):
    day = str(datetime.now().weekday())
    latest_end_time, children_today = get_latest_end(day)
    if not children_today:
        bot.send_message(message.chat.id, "–°–µ–≥–æ–¥–Ω—è –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π, –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å üòé")
        return
    latest_time_str = latest_end_time.strftime("%H:%M")
    children_str = ", ".join(children_today)
    bot.send_message(message.chat.id,
                     f"–°–µ–≥–æ–¥–Ω—è —É –¥–µ—Ç–µ–π ({children_str}) —Å–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –≤ {latest_time_str}. "
                     f"–ú–∞–º–∞ –º–æ–∂–µ—Ç –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ—Ö –≤ —ç—Ç–æ –≤—Ä–µ–º—è.")


@bot.message_handler(commands=['zabratpotom'])
def choose_day_for_zabrat(message):
    markup = days_keyboard("zabratday")
    bot.send_message(message.chat.id,
                     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ):",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("zabratday_"))
def zabratpotom(call):
    day = call.data.split("_")[1]
    latest_end_time, children_today = get_latest_end(day)
    if not children_today:
        bot.send_message(call.message.chat.id, f"–í —ç—Ç–æ—Ç –¥–µ–Ω—å —É –¥–µ—Ç–µ–π –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π üòé")
        return
    latest_time_str = latest_end_time.strftime("%H:%M")
    children_str = ", ".join(children_today)
    bot.send_message(call.message.chat.id,
                     f"–í —ç—Ç–æ—Ç –¥–µ–Ω—å ({day}) —É –¥–µ—Ç–µ–π ({children_str}) —Å–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –≤ {latest_time_str}. "
                     f"–ú–∞–º–∞ –º–æ–∂–µ—Ç –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ—Ö –≤ —ç—Ç–æ –≤—Ä–µ–º—è.")


# =================== –ó–ê–ü–£–°–ö ===================
schedule_reminders()
schedule_mom_reminder()
threading.Thread(target=daily_scheduler, daemon=True).start()

# –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é –≤–æ–∑–ª–µ —Å–∫—Ä–µ–ø–∫–∏
bot.set_my_commands([
    BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –º–µ–Ω—é"),
    BotCommand("today", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
    BotCommand("children", "–í—ã–±—Ä–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞"),
    BotCommand("weekdays", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏"),
    BotCommand("zabrat", "–°–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è"),
    BotCommand("zabratpotom", "–°–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å"),
])

bot.polling(none_stop=True)
